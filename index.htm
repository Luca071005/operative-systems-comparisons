<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>S.O. comparison</title>
  <link rel="icon" href="https://cdn-icons-png.flaticon.com/128/3550/3550498.png">
  <style>
    body {
      height: 98vh;
      display: flex;
      flex-direction: column;
      gap: 5vh;
      justify-content: center;
      align-items: center;
      /* overflow: hidden; */
      transition: .4s ease-in-out;
    }

    fieldset {
      border: 3px solid red;
      animation: bord 8s infinite ease-in-out;
      border-radius: 25px;
    }

    span {
      font: bold italic 12px verdana;
      color: #8b0000;
    }

    legend {
      text-transform: uppercase;
      font: bold italic 2.4vh sans-serif;
      background: linear-gradient(to right, blue, red);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    label {
      font: italic 14px verdana;
    }

    input[type=text] {
      caret-color: red;
      outline: none;
      border: none;
      border-bottom: 1px solid gray;
      border-radius: 5px;
      box-shadow: 5px 5px 10px 0px lightblue;
    }

    input[type=text]:invalid {
      border: 1px solid red;
    }

    .container {
      display: flex;
      flex-direction: row;
      gap: 1vw;
      width: fit-content;
      align-items: center;
      box-shadow: 5px 5px 10px 0px rebeccapurple;
    }

    .so_data {
      display: flex;
      flex-direction: column;
      gap: 0.8vh;
      box-shadow: 5px 5px 10px 0px yellow;
    }

    legend {
      text-align: center;
    }

    .risultati {
      display: none;
      width: fit-content;
      flex-direction: row;
      align-items: center;
      gap: 0.5vw;
      box-shadow: 5px 5px 10px 0px rgb(255, 47, 47);
    }

    p {
      font: bold italic 12px verdana;
      color: darkred;
    }

    input[type=button] {
      cursor: pointer;
      color: white;
      padding: 5px;
      border: 1px solid gray;
      border-radius: 15px;
      background-color: #333;
      box-shadow: 5px 5px 10px 0px gray;
      text-transform: uppercase;
      transition: background-color .5s ease-in-out;
    }

    input[type=button]:hover {
      background-color: #666;
    }

    @keyframes bord {
      0% {
        border-color: red;
      }

      25% {
        border-color: yellow;
      }

      50% {
        border-color: lightgreen;
      }

      75% {
        border-color: blue;
      }
    }

    #legend1::before {
      content: 'ðŸ“„';
    }

    input[type=text]:hover{
      border: 1px solid orange;
    }
    /* div{
      border-radius: 50%;
      border: 1px solid red;
      width: 20px;
      height: 20px;
      background: radial-gradient(ellipse at 100%, red, blue);
    } */
    .change-color{
      width: 44px;
      height: 22px;
      border-radius: 25px;
      border: 2px solid black;
      position: absolute;
      top: 40px;
      right: 20px;
      cursor: pointer;
    }
    .change-color::before{
      content: '';
      width: 18px;
      height: 18px;
      border: 1px solid black;
      border-radius: 50%;
      position: absolute;
      left: 2px;
      top: 1px;
      background-color: #333;
      transition: .4s;
      /* box-shadow: 0px 0px 100px 100vh white; */
    }
    .change-color.dark {
      border: 1px solid white;
    }
    .change-color.dark::before {
      left: 22px;
      background-color: white;
    }
    body.night {
      background-color: #333;
      color: white;
    }
    @media(max-width: 1200px){
      .container{
        flex-direction: row;
      }
      .risultati{
        flex-direction: row;
      }
    }
    @media(max-width: 980px){
      .container{
        flex-direction: row;
      }
      .risultati{
        flex-direction: row;
      }
    }
    @media(max-width: 767px){
      .container{
        flex-direction: column;
      }
      .risultati{
        flex-direction: column;
      }
    }
    @media(max-width: 480px){
      .container{
        flex-direction: column;
      }
      .risultati{
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="change-color"></div>
  <fieldset class="container">
    <legend id="legend1">Inserimento Dati</legend>
    <fieldset class="so_data">
      <legend>SO 1</legend>
      <label for="nome1">Nome:</label>
      <input type="text" name="nome1" placeholder="Inserisci il nome del SO" pattern="[a-zA-Z ]*" required>
      <label for="Tcpu1">Tcpu:</label>
      <input type="text" name="Tcpu1" placeholder="Inserisci il Tcpu" pattern="[0-9\.]*">
      <label for="Tcpu_so1">Tcpu-so:</label>
      <input type="text" name="Tcpu_so1" placeholder="Inserisci il Tcpu-so" pattern="[0-9\.]*">
      <label for="Tcpu_pr1">Tcpu-pr:</label>
      <input type="text" name="Tcpu_pr1" placeholder="Inserisci il Tcpu-pr" pattern="[0-9\.]*">
      <label for="Ttot1">Ttot:</label>
      <input type="text" name="Ttot1" placeholder="Inserisci il Ttot" pattern="[0-9\.]*">
      <label for="Tio1">Ti/o:</label>
      <input type="text" name="Tio1" placeholder="Inserisci il Tio" pattern="[0-9\.]*">
      <label for="n_progr1">NÂ° programmi:</label>
      <input type="text" name="n_progr1" placeholder="Inserisci il nÂ° di programmi" pattern="[0-9\.]*">
    </fieldset>
    <fieldset class="so_data ult">
      <legend>SO 2</legend>
      <label for="nome2">Nome:</label>
      <input type="text" name="nome2" placeholder="Inserisci il nome del SO" pattern="[a-zA-Z ]*" required>
      <label for="Tcpu2">Tcpu:</label>
      <input type="text" name="Tcpu2" placeholder="Inserisci il Tcpu" pattern="[0-9\.]*">
      <label for="Tcpu_so2">Tcpu-so:</label>
      <input type="text" name="Tcpu_so2" placeholder="Inserisci il Tcpu-so" pattern="[0-9\.]*">
      <label for="Tcpu_pr2">Tcpu-pr:</label>
      <input type="text" name="Tcpu_pr2" placeholder="Inserisci il Tcpu-pr" pattern="[0-9\.]*">
      <label for="Ttot2">Ttot:</label>
      <input type="text" name="Ttot2" placeholder="Inserisci il Ttot" pattern="[0-9\.]*">
      <label for="Tio2">Ti/o:</label>
      <input type="text" name="Tio2" placeholder="Inserisci il Tio" pattern="[0-9\.]*">
      <label for="n_progr2">NÂ° programmi:</label>
      <input type="text" name="n_progr2" placeholder="Inserisci il nÂ° di programmi" pattern="[0-9\.]*">
    </fieldset>
    <input type="button" value="Calcola" name="calcola" title="Trova il miglior sistema operativo">
  </fieldset>
  <fieldset class="risultati" >
    <legend id="legend1">Risultati</legend>
    <fieldset class="so_data">
      <legend id="nome1">SO 1</legend>
      <div>
        <label for="percentualeCpu1">%CPU</label>
        <span name="percentualeCpu1"></span>
      </div>
      <div>
        <label for="troughtput1">Troughtput</label>
        <span name="troughtput1"></span>
      </div>
      <div>
        <label for="ratioLavCpu1">Ratio t uso cpu x so e per programmi</label>
        <span name="ratioLavCpu1"></span>
      </div>
    </fieldset>
    <fieldset class="so_data">
      <legend id="nome2">SO 2</legend>
      <div>
        <label for="percentualeCpu2">%CPU</label>
        <span name="percentualeCpu2"></span>
      </div>
      <div>
        <label for="troughtput2">Troughtput</label>
        <span name="troughtput2"></span>
      </div>
      <div>
        <label for="ratioLavCpu2">Ratio t uso cpu x so e per programmi</label>
        <span name="ratioLavCpu2"></span>
      </div>
    </fieldset>
    <p></p>
  </fieldset>
  <!-- <div></div> -->
  <script>
    const calcola = document.querySelector('input[name=calcola]');
    let so = [];
    let winner;
    calcola.addEventListener('click', () => {
      const nome1 = document.querySelector('input[name=nome1]');
      const nome2 = document.querySelector('input[name=nome2]');
      const titNome1 = document.querySelector('legend[id=nome1]');
      const titNome2 = document.querySelector('legend[id=nome2]');
      titNome1.innerHTML = nome1.value;
      titNome2.innerHTML = nome2.value;
      so = [];
      // assegno i dati in un arry multimensionale associativo
      so.push({
        Tcpu: document.querySelector('input[name=Tcpu1]'),
        Tcpu_so: document.querySelector('input[name=Tcpu_so1]'),
        Tcpu_pr: document.querySelector('input[name=Tcpu_pr1]'),
        Ttot: document.querySelector('input[name=Ttot1]'),
        Tio: document.querySelector('input[name=Tio1]'),
        n_progr: document.querySelector('input[name=n_progr1]'),
        percentualeCpu: document.querySelector('span[name=percentualeCpu1]'),
        troughtput: document.querySelector('span[name=troughtput1]'),
        ratioLavCpu: document.querySelector('span[name=ratioLavCpu1]'),
        ctr: 0
      });
      so.push({
        Tcpu: document.querySelector('input[name=Tcpu2]'),
        Tcpu_so: document.querySelector('input[name=Tcpu_so2]'),
        Tcpu_pr: document.querySelector('input[name=Tcpu_pr2]'),
        Ttot: document.querySelector('input[name=Ttot2]'),
        Tio: document.querySelector('input[name=Tio2]'),
        n_progr: document.querySelector('input[name=n_progr2]'),
        percentualeCpu: document.querySelector('span[name=percentualeCpu2]'),
        troughtput: document.querySelector('span[name=troughtput2]'),
        ratioLavCpu: document.querySelector('span[name=ratioLavCpu2]'),
        ctr: 0
      });
      // controlla se ci sono dei dati mancanti, se ci sono cerca di trovarli e se non riesce da errore all'utente;
      let ok = [];
      for (let i = 0; i < so.length; i++) {
        ok[i] = true;
        if (so[i].Tcpu.value && !so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && !so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_so.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_pr.value);
          so[i].Ttot.value = Number(so[i].Tcpu.value) + Number(so[i].Tio.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && !so[i].Tcpu_pr.value && !so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_pr.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_so.value);
          so[i].Tio.value = Number(so[i].Ttot.value) - Number(so[i].Tcpu.value);
        }
        else if (!so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && !so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu.value = Number(so[i].Tcpu_so.value) + Number(so[i].Tcpu_pr.value);
          so[i].Ttot.value = Number(so[i].Tcpu.value) + Number(so[i].Tio.value);
        }
        else if (!so[i].Tcpu.value && !so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu.value = Number(so[i].Ttot.value) - Number(so[i].Tio.value);
          so[i].Tcpu_so.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_pr.value);
        }
        else if (!so[i].Tcpu.value && so[i].Tcpu_so.value && !so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu.value = Number(so[i].Ttot.value) - Number(so[i].Tio.value);
          so[i].Tcpu_pr.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_so.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && !so[i].Tcpu_pr.value && so[i].Tio.value && !so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_pr.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_so.value);
          so[i].Ttot.value = Number(so[i].Tcpu.value) + Number(so[i].Tio.value);
        }
        else if (!so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && !so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu.value = Number(so[i].Tcpu_so.value) + Number(so[i].Tcpu_pr.value);
          so[i].Tio.value = Number(so[i].Ttot.value) - Number(so[i].Tcpu.value);
        }
        else if (so[i].Tcpu.value && !so[i].Tcpu_so.value && so[i].Tcpu_pr.value && !so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_so.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_pr.value);
          so[i].Tio.value = Number(so[i].Ttot.value) - Number(so[i].Tcpu.value);
        }
        else if (so[i].Tcpu.value && !so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && !so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_so.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_pr.value);
          so[i].Tio.value = Number(so[i].Ttot.value) - Number(so[i].Tcpu.value);
        }
        else if (!so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu.value = Number(so[i].Tcpu_so.value) + Number(so[i].Tcpu_pr.value);
        }
        else if (so[i].Tcpu.value && !so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_so.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_pr.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && !so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tcpu_pr.value = Number(so[i].Tcpu.value) - Number(so[i].Tcpu_so.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && !so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Tio.value = Number(so[i].Ttot.value) - Number(so[i].Tcpu.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && !so[i].Ttot.value && so[i].n_progr.value) {
          so[i].Ttot.value = Number(so[i].Tcpu.value) + Number(so[i].Tio.value);
        }
        else if (so[i].Tcpu.value && so[i].Tcpu_so.value && so[i].Tcpu_pr.value && so[i].Tio.value && so[i].Ttot.value && so[i].n_progr.value) continue;
        else {
          alert(`Dati so ${i + 1} insufficienti`);
          ok[i] = false;
        }
      }
      if (!ok[0] || !ok[1]) return;
      document.querySelector('fieldset[class=risultati]').style.display = 'flex';
      // calcolo vero e proprio
      for (el of so) {
        el.percentualeCpu.innerHTML = ((Number(el.Tcpu.value) / Number(el.Ttot.value)) * 100).toFixed(2) + ' %';
        el.troughtput.innerHTML = (Number(el.n_progr.value) / Number(el.Ttot.value)).toFixed(3) + ' s alla -1';
        el.ratioLavCpu.innerHTML = ((Number(el.Tcpu_so.value) / Number(el.Tcpu.value)) * 100).toFixed(2) + ' %';
      }
      // dico qual Ã¨ il migliore
      if (Number(so[0].percentualeCpu.innerHTML.split(' ')[0]) > Number(so[1].percentualeCpu.innerHTML.split(' ')[0])) so[0].ctr++;
      else if (Number(so[0].percentualeCpu.innerHTML.split(' ')[0]) < Number(so[1].percentualeCpu.innerHTML.split(' ')[0])) so[1].ctr++;
      if (Number(so[0].troughtput.innerHTML.split(' ')[0]) > Number(so[1].troughtput.innerHTML.split(' ')[0])) so[0].ctr++;
      else if (Number(so[0].troughtput.innerHTML.split(' ')[0]) < Number(so[1].troughtput.innerHTML.split(' ')[0])) so[1].ctr++;
      if (Number(so[0].ratioLavCpu.innerHTML.split(' ')[0]) < Number(so[1].ratioLavCpu.innerHTML.split(' ')[0])) so[0].ctr++;
      else if (Number(so[0].ratioLavCpu.innerHTML.split(' ')[0]) > Number(so[1].ratioLavCpu.innerHTML.split(' ')[0])) so[1].ctr++;
      if (so[0].ctr > so[1].ctr) winner = `Il vincitore Ã¨: ${nome1.value}`;
      else if (so[0].ctr < so[1].ctr) winner = `Il vincitore Ã¨: ${nome2.value}`;
      else winner = 'Pareggio';
      document.querySelector('p').innerHTML = winner;
    });
    const btnMode = document.querySelector('div.change-color');
    const body = document.querySelector('body');
    btnMode.addEventListener('click', () => {
      btnMode.classList.toggle('dark');
      body.classList.toggle('night');
    });
  </script>
</body>

</html>